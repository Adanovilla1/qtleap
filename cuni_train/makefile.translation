SHELL=/bin/bash

RUNS_DIR=tmp/$(TRANSL_PAIR)/runs-$(TEST_DATA_STEM)

# Short description of the experiment
D :=
SCENARIO := scenario/translation/$(TRANSL_PAIR)_translation_w2w.scen
SHORT_SCEN   := $(notdir $(basename $(SCENARIO)))
DATE := $(shell date +%Y-%m-%d_%H-%M-%S)

LAST_TRY := $(shell ls -d -t $(RUNS_DIR)/[0-9]* 2>/dev/null | head -n 1)
NEW_NUM  := $(shell perl -e '$$m=0; for(<$(RUNS_DIR)/*>){/\/(\d+)_/ and $$1 > $$m and $$m=$$1;} printf "%03d", $$m+1;')
NEW_TRY  := $(RUNS_DIR)/$(NEW_NUM)_$(DATE)_$(SHORT_SCEN)

# Set the last experiment as the baseline
baseline:
	echo $(notdir $(LAST_TRY)) > $(RUNS_DIR)/baseline

# Set the experiment with given prefix number as the baseline
baseline-%:
	basename $(RUNS_DIR)/$*_* > $(RUNS_DIR)/baseline

translate : $(TRANSL_MODELS) $(SRC_TEXT_SPLIT_LIST) $(TRG_TEXT_SPLIT_LIST)
	@if [ -z "$(D)" ]; then \
		echo -n "The experiment description is empty (D=\"\"). Are you sure you want to proceed (Y/N)? "; \
		read -t 10 -n 1 ANSWER; \
		if [ -z "$$ANSWER" ] || echo "$$ANSWER" | grep '^[yY]' ; then \
			echo -e "\nOK."; \
		else \
			echo -e "\nInterrupting."; \
			exit 1; \
		fi ;\
	fi ;
	@mkdir -p $(NEW_TRY)/treexfiles
	@bin/get_revision.sh > $(NEW_TRY)/svn_revision
	echo "$(D)" > $(NEW_TRY)/description
	treex --dump_scenario $(SCENARIO) >> $(NEW_TRY)/scenario.scen
	sed -i 's|__TLEMMA_STATIC_TM__|$(TLEMMA_STATIC_TM)|g' $(NEW_TRY)/scenario.scen
	sed -i 's|__TLEMMA_MAXENT_TM__|$(TLEMMA_MAXENT_TM)|g' $(NEW_TRY)/scenario.scen
	sed -i 's|__FORMEME_STATIC_TM__|$(FORMEME_STATIC_TM)|g' $(NEW_TRY)/scenario.scen
	sed -i 's|__FORMEME_MAXENT_TM__|$(FORMEME_MAXENT_TM)|g' $(NEW_TRY)/scenario.scen
	time treex $(LRC_FLAGS_TEST) $(MEMCACHED_FLAGS) \
		--name="qtl-transl" --workdir=$(NEW_TRY) \
		Read::AlignedSentences $(SRC_LANG)_src='@$(SRC_TEXT_SPLIT_LIST)' $(TRG_LANG)_ref='@$(TRG_TEXT_SPLIT_LIST)' \
		$(NEW_TRY)/scenario.scen \
		Write::Treex storable=1 path=$(NEW_TRY)/treexfiles/ \
		Print::TranslationResume source_language=$(SRC_LANG) > $(NEW_TRY)/output.txt
	cat $(NEW_TRY)/output.txt | grep '^TST' | cut -f 2- > $(NEW_TRY)/plain_output.txt
	@rm -f $(NEW_TRY)/treexfiles/*~
	@make print_maxvmem > $(NEW_TRY)/log_memory_used;
	@make -s print_warn          LAST_TRY=$(NEW_TRY) > $(NEW_TRY)/log_warn
	@make -s print_uninitialized LAST_TRY=$(NEW_TRY) > $(NEW_TRY)/log_uninitialized
	head $(NEW_TRY)/log_*

# To compute correct NIST you should preserve case, i.e. CASE := -c
ALL_RES      = res.$(TRANSL_PAIR).$(TEST_DATA_STEM).tsv
CASE :=
SHOW_RECENT := 10
BASE_TRY := $(shell [ -r $(RUNS_DIR)/baseline ] && echo -n $(RUNS_DIR)/ && cat $(RUNS_DIR)/baseline || echo no_baseline_available )

COMPARE_STATS_SCRIPT=../en2cs/compare_stats.pl

eval: $(SRC_SEGM_ADJUST_DATA) $(REF_SEGM_ADJUST_DATA)
	@echo Preparing data in $(NEW_TRY)/results
	mkdir -p $(NEW_TRY)/results
	cat $(NEW_TRY)/plain_output.txt | \
	 bin/wrap-xml.perl $(TRG_LANG) $(SRC_SEGM_ADJUST_DATA) TectoMT > $(NEW_TRY)/results/$(TEST_DATA_STEM)-tst.$(TRG_LANG).sgm
	export TMT_VERSION=`cat $(NEW_TRY)/svn_revision` && \
	export DESCRIPTION=`cat $(NEW_TRY)/description` && \
	bin/mteval-v13a.pl --international-tokenization $(CASE) \
	 -r $(REF_SEGM_ADJUST_DATA) \
	 -s $(SRC_SEGM_ADJUST_DATA) \
	 -t $(NEW_TRY)/results/$(TEST_DATA_STEM)-tst.$(TRG_LANG).sgm |\
	 tee $(NEW_TRY)/results/$(TEST_DATA_STEM)_results.score |\
	 perl -ne 'print join("\t",$$2,$$1,"$(TEST_DATA_STEM)/$(NEW_NUM)","$(DATE)","$(SHORT_SCEN)","$$ENV{TMT_VERSION} $$ENV{DESCRIPTION}"),"\n" if /^NIST score = (.{6})  BLEU score = (.{6})/' \
	| tee -a $(ALL_RES)
	tail -n $(SHOW_RECENT) $(ALL_RES)
	@[[ -e $(BASE_TRY)/output.txt ]] && $(COMPARE_STATS_SCRIPT) --no_color $(BASE_TRY)/output.txt $(NEW_TRY)/output.txt > $(NEW_TRY)/compared_with_$(notdir $(BASE_TRY)).txt || echo "Comparison skipped, since there is no previous baseline experiment to compare with."

# make eval-042 evaluates experiment number 042
eval-%:
	make $(@:-$*=) NEW_NUM=$* NEW_TRY=`ls -d $(RUNS_DIR)/$*_*`

COMPARE_HTML_OUTPUT?=0
ifeq ($(COMPARE_HTML_OUTPUT), 1)
	COMPARE_FLAGS= --html
endif 

c compare:
	$(COMPARE_STATS_SCRIPT) $(COMPARE_FLAGS) $(BASE_TRY)/output.txt $(LAST_TRY)/output.txt | less -R

compare-%:
	$(COMPARE_STATS_SCRIPT) $(COMPARE_FLAGS) $(RUNS_DIR)/`echo $* | cut -d: -f1`*/output.txt $(RUNS_DIR)/`echo $* | cut -d: -f2`*/output.txt | less -R

print_maxvmem:
	@grep maxvmem $(LAST_TRY)/error/*job???.sh.e* | perl -pe 's/^.*maxvmem=(.*)G/\1/' | sort -rn | head -n1

print_uninitialized:
	grep -h 'uninitialized value' $(LAST_TRY)/output/*.stderr | sed 's/<GEN.*//; s/.*Use of uninitialized value//' | sort | uniq -c | sort -rn

print_warn:
	grep -h WARN $(LAST_TRY)/output/*.stderr | sed 's/\(TREEX\|TMT\)-WARN:.//;s/\(Two lex a-nodes\).*/\1/' | sort | uniq -c | sort -rn

print_fatal:
	grep -h FATAL $(LAST_TRY)/output/*.stderr | sed 's/\(TREEX\|TMT\)-FATAL:.//' | sort | uniq -c | sort -rn

pilot0:
	if [ -z "$(PILOT0_B2)" ]; then echo "No PILOT0_B2 file with Pilot0 translation specified in $(CONFIG_FILE)"; exit 1; fi
	mkdir -p $(RUNS_DIR)/000_pilot0
	cp $(PILOT0_B2) $(RUNS_DIR)/000_pilot0/plain_output.txt
	treex Read::AlignedSentences $(SRC_LANG)_src=$(SRC_PLAIN_PREPROC_DATA) $(TRG_LANG)_ref=$(REF_PLAIN_PREPROC_DATA) $(TRG_LANG)_tst=$(PILOT0_B2) \
	       Print::TranslationResume source_language=$(SRC_LANG) language=$(TRG_LANG) selector=tst > $(RUNS_DIR)/000_pilot0/output.txt
